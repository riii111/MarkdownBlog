basePath: /
definitions:
  dto.ArticleDetail:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        description: Responseではuuid型にしない（フロントでは文字列扱いとなる）
        type: string
      likes_count:
        type: integer
      published_at:
        type: string
      series:
        $ref: '#/definitions/dto.SeriesInfo'
      slug:
        type: string
      status:
        type: string
      tags:
        items:
          $ref: '#/definitions/dto.TagInfo'
        type: array
      title:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/dto.UserInfo'
    type: object
  dto.ArticleDetailResponse:
    properties:
      data:
        $ref: '#/definitions/dto.ArticleDetail'
    type: object
  dto.ArticleListItem:
    properties:
      id:
        description: Responseではuuid型にしない（フロントでは文字列扱いとなる）
        type: string
      likes_count:
        type: integer
      published_at:
        type: string
      slug:
        type: string
      title:
        type: string
      user:
        $ref: '#/definitions/dto.UserInfo'
    type: object
  dto.ArticleListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/dto.ArticleListItem'
        type: array
      pagination:
        $ref: '#/definitions/dto.CursorPaginationMeta'
    type: object
  dto.CreateArticleRequest:
    type: object
  dto.CreateArticleResponse:
    properties:
      slug:
        example: slug
        type: string
    type: object
  dto.CursorPaginationMeta:
    properties:
      has_more:
        type: boolean
      items_per_page:
        type: integer
      next_cursor:
        type: string
    type: object
  dto.LoginRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: password
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  dto.LoginResponse:
    properties:
      display_name:
        description: UI表示用
        type: string
      id:
        description: Responseではuuid型にしない（フロントでは文字列扱いとなる）
        type: string
    type: object
  dto.RegisterUserRequest:
    properties:
      display_name:
        example: John Doe
        maxLength: 100
        minLength: 1
        type: string
      email:
        example: user@example.com
        type: string
      password:
        example: password
        maxLength: 32
        minLength: 8
        type: string
    required:
    - display_name
    - email
    - password
    type: object
  dto.RegisterUserResponse:
    properties:
      created_at:
        type: string
      display_name:
        description: UI表示用
        type: string
      id:
        description: Responseではuuid型にしない（フロントでは文字列扱いとなる）
        type: string
    type: object
  dto.SeriesInfo:
    properties:
      id:
        description: Responseではuuid型にしない（フロントでは文字列扱いとなる）
        type: string
      slug:
        type: string
      title:
        type: string
    type: object
  dto.TagInfo:
    properties:
      id:
        description: Responseではuuid型にしない（フロントでは文字列扱いとなる）
        type: string
      name:
        type: string
      slug:
        type: string
    type: object
  dto.UserInfo:
    properties:
      display_name:
        type: string
      id:
        description: Responseではuuid型にしない（フロントでは文字列扱いとなる）
        type: string
    type: object
  endpoint.ErrorResponse:
    properties:
      error:
        example: error message
        type: string
    type: object
host: localhost:8088
info:
  contact: {}
  description: This is Markdown Blog API
  title: Markdown Blog API
  version: "1.0"
paths:
  /api/articles:
    get:
      description: Get published articles with cursor-based pagination
      parameters:
      - description: Number of articles per page
        in: query
        name: limit
        type: integer
      - description: Cursor for pagination
        in: query
        name: cursor
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ArticleListResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/endpoint.ErrorResponse'
      summary: Get published articles
      tags:
      - articles
    post:
      consumes:
      - application/json
      description: Create a new blog article
      parameters:
      - description: Article creation data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateArticleRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.CreateArticleResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/endpoint.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/endpoint.ErrorResponse'
      summary: Create a new article
      tags:
      - articles
  /api/articles/{slug}:
    delete:
      description: Delete a blog article by slug
      parameters:
      - description: Article slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/endpoint.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/endpoint.ErrorResponse'
      summary: Delete an article
      tags:
      - articles
    get:
      description: Get a blog article by slug
      parameters:
      - description: Article slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ArticleDetailResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/endpoint.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/endpoint.ErrorResponse'
      summary: Get an article detail
      tags:
      - articles
  /api/articles/me:
    get:
      description: Get articles created by the authenticated user
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of articles per page (default: 20)'
        in: query
        name: per_page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ArticleListResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/endpoint.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/endpoint.ErrorResponse'
      summary: Get current user's articles
      tags:
      - articles
  /api/tags/{slug}/articles:
    get:
      description: Get published articles with specific tag
      parameters:
      - description: Tag slug
        in: path
        name: slug
        required: true
        type: string
      - description: Number of articles per page
        in: query
        name: limit
        type: integer
      - description: Cursor for pagination
        in: query
        name: cursor
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ArticleListResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/endpoint.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/endpoint.ErrorResponse'
      summary: Get articles by tag
      tags:
      - articles
  /api/users/login:
    post:
      consumes:
      - application/json
      description: Login with email and password
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/endpoint.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/endpoint.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/endpoint.ErrorResponse'
      summary: Login user
      tags:
      - users
  /api/users/logout:
    post:
      consumes:
      - application/json
      description: Logout current user and invalidate session
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/endpoint.ErrorResponse'
      security:
      - CookieAuth: []
      summary: Logout user
      tags:
      - users
  /api/users/register:
    post:
      consumes:
      - application/json
      description: Register a new user with email, password and display name
      parameters:
      - description: User registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.RegisterUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/endpoint.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/endpoint.ErrorResponse'
      summary: Register a new user
      tags:
      - users
securityDefinitions:
  CookieAuth:
    in: cookie
    name: session_token
    type: apiKey
swagger: "2.0"
